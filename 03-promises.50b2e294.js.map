{"mappings":"oeAAA,IAAAA,EAAAC,EAAA,SAEA,MAAMC,EAAUC,SAASC,cAAc,SACjCC,EAAYH,EAAQI,iBAAiB,SAqC3C,SAASC,EAAcC,EAAUC,GAC/B,MAAMC,EAAgBC,KAAKC,SAAW,GAEtC,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3BC,YAAW,KACLN,EACFI,EAAQ,C,SAAEN,E,MAAUC,IAEpBM,EAAO,C,SAAEP,E,MAAUC,GAAQ,GAE5BA,EAAM,G,CA7CbJ,EAAU,GAAGY,MAAQ,IACrBZ,EAAU,GAAGY,MAAQ,IACrBZ,EAAU,GAAGY,MAAQ,EAErBjB,EAAAkB,OAAOC,KAAK,CACVC,SAAS,EACTZ,SAAU,eAGZN,EAAQmB,iBAAiB,UAEzB,SAAuBC,GACrBA,EAAMC,iBAEN,MAAMC,EAAO,GACI,IAAIC,SAASH,EAAMI,eAE3BC,SAAQ,CAACV,EAAOW,IAASJ,EAAKI,GAAQC,OAAOZ,KAEtD,MAAMR,MAAEA,EAAKqB,KAAEA,EAAIC,OAAEA,GAAWP,EAChC,IAAIQ,EAAevB,EAEnB,IAAK,IAAIwB,EAAI,EAAGA,GAAKF,EAAQE,GAAK,EAChC1B,EAAc0B,EAAGD,GACdE,MAAK,EAAC1B,SAAEA,EAAQC,MAAEA,MACjBT,EAAAkB,OAAOiB,QAAQ,uBAAuB3B,QAAeC,MAAU,IAEhE2B,OAAM,EAAC5B,SAAEA,EAAQC,MAAEA,MAClBT,EAAAkB,OAAOmB,QAAQ,sBAAsB7B,QAAeC,MAAU,IAGlEuB,GAAgBF,C","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst formRef = document.querySelector('.form');\nconst inputsRef = formRef.querySelectorAll('input');\n\ninputsRef[0].value = 500;\ninputsRef[1].value = 300;\ninputsRef[2].value = 8;\n\nNotify.init({\n  useIcon: false,\n  position: 'center-top',\n});\n\nformRef.addEventListener('submit', onStartCreate)\n\nfunction onStartCreate(event) {\n  event.preventDefault();\n\n  const data = {}\n  const formData = new FormData(event.currentTarget);\n\n  formData.forEach((value, name) => data[name] = Number(value));\n\n  const { delay, step, amount } = data;\n  let counterDelay = delay;\n\n  for (let i = 1; i <= amount; i += 1) {\n    createPromise(i, counterDelay)\n      .then(({ position, delay }) => {\n        Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n      });\n\n    counterDelay += step;\n  }\n}\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay)\n  });\n}"],"names":["$iQIUW","parcelRequire","$47d4ff9957288465$var$formRef","document","querySelector","$47d4ff9957288465$var$inputsRef","querySelectorAll","$47d4ff9957288465$var$createPromise","position","delay","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","value","Notify","init","useIcon","addEventListener","event","preventDefault","data","FormData","currentTarget","forEach","name","Number","step","amount","counterDelay","i","then","success","catch","failure"],"version":3,"file":"03-promises.50b2e294.js.map"}